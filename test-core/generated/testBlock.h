#ifndef TEST_BLOCK_H_
#define TEST_BLOCK_H_
/**
 * \file testBlock.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from test.xml
 */

#include "core/reflection/reflection.h"
#include "core/reflection/defaultSetter.h"
#include "core/reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */
#include "testClass.h"

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
class G12Buffer;
class RGB24Buffer;
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Test Block 
 * Test Block 
 **/
class TestBlock : public corecvs::BaseReflection<TestBlock>
{
public:
    enum FieldId {
        IN0_ID,
        IN1_ID,
        PARAMS_ID,
        OUT0_ID,
        TEST_BLOCK_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief in0 
     * in0 
     */
    G12Buffer * mIn0;

    /** 
     * \brief in1 
     * in1 
     */
    RGB24Buffer * mIn1;

    /** 
     * \brief params 
     * params 
     */
    TestClass mParams;

    /** 
     * \brief out0 
     * out0 
     */
    G12Buffer * mOut0;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    G12Buffer * in0() const
    {
        return mIn0;
    }

    RGB24Buffer * in1() const
    {
        return mIn1;
    }

    TestClass params() const
    {
        return mParams;
    }

    G12Buffer * out0() const
    {
        return mOut0;
    }

    /* Section with setters */
    void setIn0(G12Buffer * in0)
    {
        mIn0 = in0;
    }

    void setIn1(RGB24Buffer * in1)
    {
        mIn1 = in1;
    }

    void setParams(TestClass const &params)
    {
        mParams = params;
    }

    void setOut0(G12Buffer * out0)
    {
        mOut0 = out0;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit((void * &)mIn0,             static_cast<const corecvs::PointerField *>(fields()[IN0_ID]));
        visitor.visit((void * &)mIn1,             static_cast<const corecvs::PointerField *>(fields()[IN1_ID]));
        visitor.visit(mParams,                    static_cast<const corecvs::CompositeField *>(fields()[PARAMS_ID]));
        visitor.visit((void * &)mOut0,            static_cast<const corecvs::PointerField *>(fields()[OUT0_ID]));
    }

    TestBlock()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    TestBlock(
          G12Buffer * in0
        , RGB24Buffer * in1
        , TestClass params
        , G12Buffer * out0
    )
    {
        mIn0 = in0;
        mIn1 = in1;
        mParams = params;
        mOut0 = out0;
    }

    bool operator ==(const TestBlock &other) const 
    {
        if ( !(this->mParams == other.mParams)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, TestBlock &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //TEST_BLOCK_H_
