/**
 * \file testBlock.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from test.xml
 */

#include <vector>
#include <stddef.h>
#include "testBlock.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
#if 0
template<>
Reflection BaseReflection<TestBlock>::reflection = Reflection();
template<>
int BaseReflection<TestBlock>::dummy = TestBlock::staticInit();
#endif
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int TestBlock::staticInit(corecvs::Reflection *toFill)
{
    if (toFill == NULL || toFill->objectSize != 0) {
        SYNC_PRINT(("staticInit(): Contract Violation in <TestBlock>\n"));
         return -1;
    }

    toFill->name = ReflectionNaming(
        "Test Block",
        "Test Block",
        ""
    );

     toFill->objectSize = sizeof(TestBlock);
     

    PointerField* field0 = new PointerField
        (
          TestBlock::IN0_ID,
          offsetof(TestBlock, mIn0),
          NULL,
          "in0",
          "in0",
          "in0",
          "G12Buffer"
        );
    toFill->fields.push_back(field0);
    /*  */ 
    PointerField* field1 = new PointerField
        (
          TestBlock::IN1_ID,
          offsetof(TestBlock, mIn1),
          NULL,
          "in1",
          "in1",
          "in1",
          "RGB24Buffer"
        );
    toFill->fields.push_back(field1);
    /*  */ 
    CompositeField* field2 = new CompositeField
        (
          TestBlock::PARAMS_ID,
          offsetof(TestBlock, mParams),
          "params",
          "TestClass",
          "params",
          "params",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Test Class");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field2->reflection = it->second;
        } else {
             printf("Reflection TestBlock to the subclass Test Class can't be linked\n");
        }
    }
    toFill->fields.push_back(field2);
    /*  */ 
    PointerField* field3 = new PointerField
        (
          TestBlock::OUT0_ID,
          offsetof(TestBlock, mOut0),
          NULL,
          "out0",
          "out0",
          "out0",
          "G12Buffer"
        );
    toFill->fields.push_back(field3);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Test Block")]= toFill;
   return 0;
}
int TestBlock::relinkCompositeFields()
{
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Test Class");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[2]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection TestBlock to the subclass Test Class can't be linked\n");
        }
    }
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


