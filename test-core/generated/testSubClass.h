#ifndef TEST_SUBCLASS_H_
#define TEST_SUBCLASS_H_
/**
 * \file testSubClass.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from test.xml
 */

#include "core/reflection/reflection.h"
#include "core/reflection/defaultSetter.h"
#include "core/reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Test SubClass 
 * Test SubClass 
 **/
class TestSubClass : public corecvs::BaseReflection<TestSubClass>
{
public:
    enum FieldId {
        INT_FIELD0_ID,
        DOUBLE_FIELD0_ID,
        TEST_SUBCLASS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief Int Field0 
     * Int Field0 
     */
    int mIntField0;

    /** 
     * \brief Double field0 
     * Double field0 
     */
    double mDoubleField0;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    int intField0() const
    {
        return mIntField0;
    }

    double doubleField0() const
    {
        return mDoubleField0;
    }

    /* Section with setters */
    void setIntField0(int intField0)
    {
        mIntField0 = intField0;
    }

    void setDoubleField0(double doubleField0)
    {
        mDoubleField0 = doubleField0;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mIntField0,                 static_cast<const corecvs::IntField *>(fields()[INT_FIELD0_ID]));
        visitor.visit(mDoubleField0,              static_cast<const corecvs::DoubleField *>(fields()[DOUBLE_FIELD0_ID]));
    }

    TestSubClass()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    TestSubClass(
          int intField0
        , double doubleField0
    )
    {
        mIntField0 = intField0;
        mDoubleField0 = doubleField0;
    }

    bool operator ==(const TestSubClass &other) const 
    {
        if ( !(this->mIntField0 == other.mIntField0)) return false;
        if ( !(this->mDoubleField0 == other.mDoubleField0)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, TestSubClass &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //TEST_SUBCLASS_H_
