/**
 * \file backgroundFilterParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from bufferFilters.xml
 */

#include <vector>
#include <stddef.h>
#include "backgroundFilterParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
#if 0
template<>
Reflection BaseReflection<BackgroundFilterParameters>::reflection = Reflection();
template<>
int BaseReflection<BackgroundFilterParameters>::dummy = BackgroundFilterParameters::staticInit();
#endif
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int BackgroundFilterParameters::staticInit(corecvs::Reflection *toFill)
{
    if (toFill == NULL || toFill->objectSize != 0) {
        SYNC_PRINT(("staticInit(): Contract Violation in <BackgroundFilterParameters>\n"));
         return -1;
    }

    toFill->name = ReflectionNaming(
        "Background Filter Parameters",
        "Background Filter Parameters",
        ""
    );

     toFill->objectSize = sizeof(BackgroundFilterParameters);
     

    IntField* field0 = new IntField
        (
          BackgroundFilterParameters::THRESHOLD_ID,
          offsetof(BackgroundFilterParameters, mThreshold),
          100,
          "Threshold",
          "Threshold",
          "Threshold",
          true,
         0,
         10000,
         1
        );
    toFill->fields.push_back(field0);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Background Filter Parameters")]= toFill;
   return 0;
}
int BackgroundFilterParameters::relinkCompositeFields()
{
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


