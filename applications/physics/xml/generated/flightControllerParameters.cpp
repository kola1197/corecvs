/**
 * \file flightControllerParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from physics.xml
 */

#include <vector>
#include <stddef.h>
#include "flightControllerParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
#if 0
template<>
Reflection BaseReflection<FlightControllerParameters>::reflection = Reflection();
template<>
int BaseReflection<FlightControllerParameters>::dummy = FlightControllerParameters::staticInit();
#endif
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int FlightControllerParameters::staticInit(corecvs::Reflection *toFill)
{
    if (toFill == NULL || toFill->objectSize != 0) {
        SYNC_PRINT(("staticInit(): Contract Violation in <FlightControllerParameters>\n"));
         return -1;
    }

    toFill->name = ReflectionNaming(
        "Flight Controller Parameters",
        "Flight Controller Parameters",
        ""
    );

     toFill->objectSize = sizeof(FlightControllerParameters);
     

    EnumField* field0 = new EnumField
        (
          FlightControllerParameters::FLIGHT_MODE_ID,
          offsetof(FlightControllerParameters, mFlightMode),
          0,
          "flight mode",
          "flight mode",
          "flight mode",
          new EnumReflection(5
          , new EnumOption(0,"Raw")
          , new EnumOption(1,"Stab")
          , new EnumOption(2,"Acro")
          , new EnumOption(3,"Althold")
          , new EnumOption(4,"Loiter")
          )
        );
    field0->widgetHint=BaseField::COMBO_BOX;
    toFill->fields.push_back(field0);
    /*  */ 
    CompositeField* field1 = new CompositeField
        (
          FlightControllerParameters::PIDS_ID,
          offsetof(FlightControllerParameters, mPids),
          "pids",
          "BetaflightPIDParameters",
          "pids",
          "pids",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Betaflight PID Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field1->reflection = it->second;
        } else {
             printf("Reflection FlightControllerParameters to the subclass Betaflight PID Parameters can't be linked\n");
        }
    }
    toFill->fields.push_back(field1);
    /*  */ 
    CompositeField* field2 = new CompositeField
        (
          FlightControllerParameters::YAW_RATE_ID,
          offsetof(FlightControllerParameters, mYawRate),
          "Yaw Rate",
          "RateParameters",
          "Yaw Rate",
          "Yaw Rate",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Rate Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field2->reflection = it->second;
        } else {
             printf("Reflection FlightControllerParameters to the subclass Rate Parameters can't be linked\n");
        }
    }
    toFill->fields.push_back(field2);
    /*  */ 
    CompositeField* field3 = new CompositeField
        (
          FlightControllerParameters::PITCH_ROLL_RATE_ID,
          offsetof(FlightControllerParameters, mPitchRollRate),
          "Pitch Roll Rate",
          "RateParameters",
          "Pitch Roll Rate",
          "Pitch Roll Rate",
           NULL
        );
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Rate Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             field3->reflection = it->second;
        } else {
             printf("Reflection FlightControllerParameters to the subclass Rate Parameters can't be linked\n");
        }
    }
    toFill->fields.push_back(field3);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Flight Controller Parameters")]= toFill;
   return 0;
}
int FlightControllerParameters::relinkCompositeFields()
{
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Betaflight PID Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[1]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection FlightControllerParameters to the subclass Betaflight PID Parameters can't be linked\n");
        }
    }
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Rate Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[2]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection FlightControllerParameters to the subclass Rate Parameters can't be linked\n");
        }
    }
    {
        ReflectionDirectory* directory = ReflectionDirectoryHolder::getReflectionDirectory();
        std::string name("Rate Parameters");
        ReflectionDirectory::iterator it = directory->find(name);
        if(it != directory->end()) {
             const CompositeField* field = static_cast<const CompositeField*>(getReflection()->fields[3]);
             const_cast<CompositeField*>(field)->reflection = it->second;
        } else {
             printf("Reflection FlightControllerParameters to the subclass Rate Parameters can't be linked\n");
        }
    }
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


