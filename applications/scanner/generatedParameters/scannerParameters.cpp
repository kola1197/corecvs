/**
 * \file scannerParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from scanner.xml
 */

#include <vector>
#include <stddef.h>
#include "scannerParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
#if 0
template<>
Reflection BaseReflection<ScannerParameters>::reflection = Reflection();
template<>
int BaseReflection<ScannerParameters>::dummy = ScannerParameters::staticInit();
#endif
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int ScannerParameters::staticInit(corecvs::Reflection *toFill)
{
    if (toFill == NULL || toFill->objectSize != 0) {
        SYNC_PRINT(("staticInit(): Contract Violation in <ScannerParameters>\n"));
         return -1;
    }

    toFill->name = ReflectionNaming(
        "Scanner Parameters",
        "Scanner parameters",
        ""
    );

     toFill->objectSize = sizeof(ScannerParameters);
     

    EnumField* field0 = new EnumField
        (
          ScannerParameters::CHANNEL_ID,
          offsetof(ScannerParameters, mChannel),
          0,
          "channel",
          "channel",
          "channel",
          new EnumReflection(15
          , new EnumOption(0,"R",":/new/colors/colors/color_red.png@main.qrc")
          , new EnumOption(1,"G",":/new/colors/colors/color_green.png@main.qrc")
          , new EnumOption(2,"B",":/new/colors/colors/color_blue.png@main.qrc")
          , new EnumOption(3,"Alpha")
          , new EnumOption(4,"Y")
          , new EnumOption(5,"Cr")
          , new EnumOption(6,"Cb")
          , new EnumOption(7,"U")
          , new EnumOption(8,"V")
          , new EnumOption(9,"Chroma")
          , new EnumOption(10,"Gray",":/new/colors/colors/color_gray.png@main.qrc")
          , new EnumOption(11,"Luma",":/new/colors/colors/color_gray.png@main.qrc")
          , new EnumOption(12,"Hue",":/new/colors/colors/color_wheel.png@main.qrc")
          , new EnumOption(13,"Saturation")
          , new EnumOption(14,"Value")
          )
        );
    field0->widgetHint=BaseField::COMBO_BOX;
    toFill->fields.push_back(field0);
    /*  */ 
    EnumField* field1 = new EnumField
        (
          ScannerParameters::ALGO_ID,
          offsetof(ScannerParameters, mAlgo),
          0,
          "algo",
          "algo",
          "algo",
          new EnumReflection(3
          , new EnumOption(0,"Brightness")
          , new EnumOption(1,"Hue")
          , new EnumOption(2,"Dummy")
          )
        );
    field1->widgetHint=BaseField::COMBO_BOX;
    toFill->fields.push_back(field1);
    /*  */ 
    IntField* field2 = new IntField
        (
          ScannerParameters::RED_THRESHOLD_ID,
          offsetof(ScannerParameters, mRedThreshold),
          200,
          "red threshold",
          "red threshold",
          "red threshold",
          true,
         0,
         255,
         1
        );
    toFill->fields.push_back(field2);
    /*  */ 
    DoubleField* field3 = new DoubleField
        (
          ScannerParameters::HEIGHT_ID,
          offsetof(ScannerParameters, mHeight),
          10,
          "height",
          "height",
          "height"
        );
    field3->widgetHint=BaseField::SPIN_BOX;
    field3->precision=2;
    toFill->fields.push_back(field3);
    /*  */ 
    IntField* field4 = new IntField
        (
          ScannerParameters::GRAPH_LINE_ID,
          offsetof(ScannerParameters, mGraphLine),
          960,
          "Graph line",
          "Graph line",
          "Graph line",
          true,
         0,
         1920,
         1
        );
    toFill->fields.push_back(field4);
    /*  */ 
    BoolField* field5 = new BoolField
        (
          ScannerParameters::USE_SSE_ID,
          offsetof(ScannerParameters, mUseSSE),
          true,
          "Use SSE",
          "Use SSE",
          "Use SSE"
        );
    field5->widgetHint=BaseField::CHECK_BOX;
    toFill->fields.push_back(field5);
    /*  */ 
    BoolField* field6 = new BoolField
        (
          ScannerParameters::CALCULATE_CONVOLUTION_ID,
          offsetof(ScannerParameters, mCalculateConvolution),
          true,
          "Calculate convolution",
          "Calculate convolution",
          "Calculate convolution"
        );
    field6->widgetHint=BaseField::CHECK_BOX;
    toFill->fields.push_back(field6);
    /*  */ 
    BoolField* field7 = new BoolField
        (
          ScannerParameters::CALIBRATIONMODE_ID,
          offsetof(ScannerParameters, mCalibrationMode),
          false,
          "CalibrationMode",
          "CalibrationMode",
          "CalibrationMode"
        );
    field7->widgetHint=BaseField::CHECK_BOX;
    toFill->fields.push_back(field7);
    /*  */ 
    DoubleField* field8 = new DoubleField
        (
          ScannerParameters::CORNER_SCORE_ID,
          offsetof(ScannerParameters, mCornerScore),
          0.05,
          "Corner Score",
          "Corner Score",
          "Corner Score",
          true,
         0,
         255,
         1
        );
    field8->widgetHint=BaseField::SPIN_BOX;
    field8->precision=3;
    toFill->fields.push_back(field8);
    /*  */ 
    IntField* field9 = new IntField
        (
          ScannerParameters::HARRIS_APPERTURE_ID,
          offsetof(ScannerParameters, mHarrisApperture),
          5,
          "Harris Apperture",
          "Harris Apperture",
          "Harris Apperture",
          true,
         0,
         255,
         1
        );
    toFill->fields.push_back(field9);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Scanner Parameters")]= toFill;
   return 0;
}
int ScannerParameters::relinkCompositeFields()
{
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


