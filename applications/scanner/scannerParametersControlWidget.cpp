/**
 * \file scannerParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "scannerParametersControlWidget.h"
#include "ui_scannerParametersControlWidget.h"
#include <memory>
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


ScannerParametersControlWidget::ScannerParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::ScannerParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->channelComboBox, SIGNAL(currentIndexChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->algoComboBox, SIGNAL(currentIndexChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->redThresholdSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->heightSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->graphLineSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->useSSECheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->calculateConvolutionCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->calibrationModeCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->cornerScoreSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->harrisAppertureSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
}

ScannerParametersControlWidget::~ScannerParametersControlWidget()
{

    delete mUi;
}

void ScannerParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    std::unique_ptr<ScannerParameters> params(createParameters());
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
}

void ScannerParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    saver.saveParameters(*std::unique_ptr<ScannerParameters>(createParameters()), rootPath);
}

void ScannerParametersControlWidget::getParameters(ScannerParameters& params) const
{
    params = *std::unique_ptr<ScannerParameters>(createParameters());
}


ScannerParameters *ScannerParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    return new ScannerParameters(
          static_cast<ImageChannel::ImageChannel>(mUi->channelComboBox->currentIndex())
        , static_cast<RedRemovalType::RedRemovalType>(mUi->algoComboBox->currentIndex())
        , mUi->redThresholdSpinBox->value()
        , mUi->heightSpinBox->value()
        , mUi->graphLineSpinBox->value()
        , mUi->useSSECheckBox->isChecked()
        , mUi->calculateConvolutionCheckBox->isChecked()
        , mUi->calibrationModeCheckBox->isChecked()
        , mUi->cornerScoreSpinBox->value()
        , mUi->harrisAppertureSpinBox->value()
    );
}

void ScannerParametersControlWidget::setParameters(const ScannerParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->channelComboBox->setCurrentIndex(input.channel());
    mUi->algoComboBox->setCurrentIndex(input.algo());
    mUi->redThresholdSpinBox->setValue(input.redThreshold());
    mUi->heightSpinBox->setValue(input.height());
    mUi->graphLineSpinBox->setValue(input.graphLine());
    mUi->useSSECheckBox->setChecked(input.useSSE());
    mUi->calculateConvolutionCheckBox->setChecked(input.calculateConvolution());
    mUi->calibrationModeCheckBox->setChecked(input.calibrationMode());
    mUi->cornerScoreSpinBox->setValue(input.cornerScore());
    mUi->harrisAppertureSpinBox->setValue(input.harrisApperture());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void ScannerParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    ScannerParameters *inputCasted = static_cast<ScannerParameters *>(input);
    setParameters(*inputCasted);
}
