#ifndef FLIGHT_CONTROLLER_PARAMETERS_H_
#define FLIGHT_CONTROLLER_PARAMETERS_H_
/**
 * \file flightControllerParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from physics.xml
 */

#include "core/reflection/reflection.h"
#include "core/reflection/defaultSetter.h"
#include "core/reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */
#include "betaflightPIDParameters.h"
#include "rateParameters.h"

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */
#include "flightMode.h"

/**
 * \brief Flight Controller Parameters 
 * Flight Controller Parameters 
 **/
class FlightControllerParameters : public corecvs::BaseReflection<FlightControllerParameters>
{
public:
    enum FieldId {
        FLIGHT_MODE_ID,
        PIDS_ID,
        YAW_RATE_ID,
        PITCH_ROLL_RATE_ID,
        FLIGHT_CONTROLLER_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief flight mode 
     * flight mode 
     */
    int mFlightMode;

    /** 
     * \brief pids 
     * pids 
     */
    BetaflightPIDParameters mPids;

    /** 
     * \brief Yaw Rate 
     * Yaw Rate 
     */
    RateParameters mYawRate;

    /** 
     * \brief Pitch Roll Rate 
     * Pitch Roll Rate 
     */
    RateParameters mPitchRollRate;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    FlightMode::FlightMode flightMode() const
    {
        return static_cast<FlightMode::FlightMode>(mFlightMode);
    }

    BetaflightPIDParameters pids() const
    {
        return mPids;
    }

    RateParameters yawRate() const
    {
        return mYawRate;
    }

    RateParameters pitchRollRate() const
    {
        return mPitchRollRate;
    }

    /* Section with setters */
    void setFlightMode(FlightMode::FlightMode flightMode)
    {
        mFlightMode = flightMode;
    }

    void setPids(BetaflightPIDParameters const &pids)
    {
        mPids = pids;
    }

    void setYawRate(RateParameters const &yawRate)
    {
        mYawRate = yawRate;
    }

    void setPitchRollRate(RateParameters const &pitchRollRate)
    {
        mPitchRollRate = pitchRollRate;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit((int &)mFlightMode,         static_cast<const corecvs::EnumField *>(fields()[FLIGHT_MODE_ID]));
        visitor.visit(mPids,                      static_cast<const corecvs::CompositeField *>(fields()[PIDS_ID]));
        visitor.visit(mYawRate,                   static_cast<const corecvs::CompositeField *>(fields()[YAW_RATE_ID]));
        visitor.visit(mPitchRollRate,             static_cast<const corecvs::CompositeField *>(fields()[PITCH_ROLL_RATE_ID]));
    }

    FlightControllerParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    FlightControllerParameters(
          FlightMode::FlightMode flightMode
        , BetaflightPIDParameters pids
        , RateParameters yawRate
        , RateParameters pitchRollRate
    )
    {
        mFlightMode = flightMode;
        mPids = pids;
        mYawRate = yawRate;
        mPitchRollRate = pitchRollRate;
    }

    bool operator ==(const FlightControllerParameters &other) const 
    {
        if ( !(this->mFlightMode == other.mFlightMode)) return false;
        if ( !(this->mPids == other.mPids)) return false;
        if ( !(this->mYawRate == other.mYawRate)) return false;
        if ( !(this->mPitchRollRate == other.mPitchRollRate)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, FlightControllerParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //FLIGHT_CONTROLLER_PARAMETERS_H_
