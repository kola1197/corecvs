#ifndef APRILTAG_PARAMETERS_H_
#define APRILTAG_PARAMETERS_H_
/**
 * \file apriltagParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from apriltag.xml
 */

#include "core/reflection/reflection.h"
#include "core/reflection/defaultSetter.h"
#include "core/reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */
#include "aprilTagType.h"

/**
 * \brief Apriltag Parameters 
 * Apriltag Parameters 
 **/
class ApriltagParameters : public corecvs::BaseReflection<ApriltagParameters>
{
public:
    enum FieldId {
        TAG_FAMILY_ID,
        AT_THREADS_ID,
        AT_DEBUG_ID,
        AT_QUIET_ID,
        AT_REFINE_EDGES_ID,
        AT_DECIMATE_ID,
        BLUR_ID,
        DECODE_SHARPENING_ID,
        TRACE_ID,
        MIN_CLUSTER_PIXELS_ID,
        MAX_NMAXIMA_ID,
        MAX_LINE_FIT_MSE_ID,
        MIN_WHITE_BLACK_DIFF_ID,
        DEGLITCH_ID,
        APRILTAG_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief tag_family 
     * tag_family 
     */
    int mTag_family;

    /** 
     * \brief at_threads 
     * at_threads 
     */
    int mAt_threads;

    /** 
     * \brief at_debug 
     * at_debug 
     */
    bool mAt_debug;

    /** 
     * \brief at_quiet 
     * at_quiet 
     */
    bool mAt_quiet;

    /** 
     * \brief at_refine_edges 
     * at_refine_edges 
     */
    bool mAt_refine_edges;

    /** 
     * \brief at_decimate 
     * at_decimate 
     */
    double mAt_decimate;

    /** 
     * \brief blur 
     * blur 
     */
    double mBlur;

    /** 
     * \brief decode_sharpening 
     * decode_sharpening 
     */
    double mDecode_sharpening;

    /** 
     * \brief trace 
     * trace 
     */
    bool mTrace;

    /** 
     * \brief min_cluster_pixels 
     * min_cluster_pixels 
     */
    int mMin_cluster_pixels;

    /** 
     * \brief max_nmaxima 
     * max_nmaxima 
     */
    int mMax_nmaxima;

    /** 
     * \brief max_line_fit_mse 
     * max_line_fit_mse 
     */
    double mMax_line_fit_mse;

    /** 
     * \brief min_white_black_diff 
     * min_white_black_diff 
     */
    int mMin_white_black_diff;

    /** 
     * \brief deglitch 
     * deglitch 
     */
    int mDeglitch;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    AprilTagType::AprilTagType tag_family() const
    {
        return static_cast<AprilTagType::AprilTagType>(mTag_family);
    }

    int at_threads() const
    {
        return mAt_threads;
    }

    bool at_debug() const
    {
        return mAt_debug;
    }

    bool at_quiet() const
    {
        return mAt_quiet;
    }

    bool at_refine_edges() const
    {
        return mAt_refine_edges;
    }

    double at_decimate() const
    {
        return mAt_decimate;
    }

    double blur() const
    {
        return mBlur;
    }

    double decode_sharpening() const
    {
        return mDecode_sharpening;
    }

    bool trace() const
    {
        return mTrace;
    }

    int min_cluster_pixels() const
    {
        return mMin_cluster_pixels;
    }

    int max_nmaxima() const
    {
        return mMax_nmaxima;
    }

    double max_line_fit_mse() const
    {
        return mMax_line_fit_mse;
    }

    int min_white_black_diff() const
    {
        return mMin_white_black_diff;
    }

    int deglitch() const
    {
        return mDeglitch;
    }

    /** Section with setters */
    void setTag_family(AprilTagType::AprilTagType tag_family)
    {
        mTag_family = tag_family;
    }

    void setAt_threads(int at_threads)
    {
        mAt_threads = at_threads;
    }

    void setAt_debug(bool at_debug)
    {
        mAt_debug = at_debug;
    }

    void setAt_quiet(bool at_quiet)
    {
        mAt_quiet = at_quiet;
    }

    void setAt_refine_edges(bool at_refine_edges)
    {
        mAt_refine_edges = at_refine_edges;
    }

    void setAt_decimate(double at_decimate)
    {
        mAt_decimate = at_decimate;
    }

    void setBlur(double blur)
    {
        mBlur = blur;
    }

    void setDecode_sharpening(double decode_sharpening)
    {
        mDecode_sharpening = decode_sharpening;
    }

    void setTrace(bool trace)
    {
        mTrace = trace;
    }

    void setMin_cluster_pixels(int min_cluster_pixels)
    {
        mMin_cluster_pixels = min_cluster_pixels;
    }

    void setMax_nmaxima(int max_nmaxima)
    {
        mMax_nmaxima = max_nmaxima;
    }

    void setMax_line_fit_mse(double max_line_fit_mse)
    {
        mMax_line_fit_mse = max_line_fit_mse;
    }

    void setMin_white_black_diff(int min_white_black_diff)
    {
        mMin_white_black_diff = min_white_black_diff;
    }

    void setDeglitch(int deglitch)
    {
        mDeglitch = deglitch;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit((int &)mTag_family,         static_cast<const corecvs::EnumField *>(fields()[TAG_FAMILY_ID]));
        visitor.visit(mAt_threads,                static_cast<const corecvs::IntField *>(fields()[AT_THREADS_ID]));
        visitor.visit(mAt_debug,                  static_cast<const corecvs::BoolField *>(fields()[AT_DEBUG_ID]));
        visitor.visit(mAt_quiet,                  static_cast<const corecvs::BoolField *>(fields()[AT_QUIET_ID]));
        visitor.visit(mAt_refine_edges,           static_cast<const corecvs::BoolField *>(fields()[AT_REFINE_EDGES_ID]));
        visitor.visit(mAt_decimate,               static_cast<const corecvs::DoubleField *>(fields()[AT_DECIMATE_ID]));
        visitor.visit(mBlur,                      static_cast<const corecvs::DoubleField *>(fields()[BLUR_ID]));
        visitor.visit(mDecode_sharpening,         static_cast<const corecvs::DoubleField *>(fields()[DECODE_SHARPENING_ID]));
        visitor.visit(mTrace,                     static_cast<const corecvs::BoolField *>(fields()[TRACE_ID]));
        visitor.visit(mMin_cluster_pixels,        static_cast<const corecvs::IntField *>(fields()[MIN_CLUSTER_PIXELS_ID]));
        visitor.visit(mMax_nmaxima,               static_cast<const corecvs::IntField *>(fields()[MAX_NMAXIMA_ID]));
        visitor.visit(mMax_line_fit_mse,          static_cast<const corecvs::DoubleField *>(fields()[MAX_LINE_FIT_MSE_ID]));
        visitor.visit(mMin_white_black_diff,      static_cast<const corecvs::IntField *>(fields()[MIN_WHITE_BLACK_DIFF_ID]));
        visitor.visit(mDeglitch,                  static_cast<const corecvs::IntField *>(fields()[DEGLITCH_ID]));
    }

    ApriltagParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    ApriltagParameters(
          AprilTagType::AprilTagType tag_family
        , int at_threads
        , bool at_debug
        , bool at_quiet
        , bool at_refine_edges
        , double at_decimate
        , double blur
        , double decode_sharpening
        , bool trace
        , int min_cluster_pixels
        , int max_nmaxima
        , double max_line_fit_mse
        , int min_white_black_diff
        , int deglitch
    )
    {
        mTag_family = tag_family;
        mAt_threads = at_threads;
        mAt_debug = at_debug;
        mAt_quiet = at_quiet;
        mAt_refine_edges = at_refine_edges;
        mAt_decimate = at_decimate;
        mBlur = blur;
        mDecode_sharpening = decode_sharpening;
        mTrace = trace;
        mMin_cluster_pixels = min_cluster_pixels;
        mMax_nmaxima = max_nmaxima;
        mMax_line_fit_mse = max_line_fit_mse;
        mMin_white_black_diff = min_white_black_diff;
        mDeglitch = deglitch;
    }

    /** Exact match comparator **/ 
    bool operator ==(const ApriltagParameters &other) const 
    {
        if ( !(this->mTag_family == other.mTag_family)) return false;
        if ( !(this->mAt_threads == other.mAt_threads)) return false;
        if ( !(this->mAt_debug == other.mAt_debug)) return false;
        if ( !(this->mAt_quiet == other.mAt_quiet)) return false;
        if ( !(this->mAt_refine_edges == other.mAt_refine_edges)) return false;
        if ( !(this->mAt_decimate == other.mAt_decimate)) return false;
        if ( !(this->mBlur == other.mBlur)) return false;
        if ( !(this->mDecode_sharpening == other.mDecode_sharpening)) return false;
        if ( !(this->mTrace == other.mTrace)) return false;
        if ( !(this->mMin_cluster_pixels == other.mMin_cluster_pixels)) return false;
        if ( !(this->mMax_nmaxima == other.mMax_nmaxima)) return false;
        if ( !(this->mMax_line_fit_mse == other.mMax_line_fit_mse)) return false;
        if ( !(this->mMin_white_black_diff == other.mMin_white_black_diff)) return false;
        if ( !(this->mDeglitch == other.mDeglitch)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, ApriltagParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //APRILTAG_PARAMETERS_H_
