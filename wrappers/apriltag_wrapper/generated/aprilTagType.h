#ifndef APRILTAGTYPE_H_
#define APRILTAGTYPE_H_
/**
 * \file aprilTagType.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from apriltag.xml
 */

/**
 * Helper namespace to hide AprilTagType enum from global context.
 */

namespace AprilTagType {

/** 
 * \brief AprilTagType 
 * AprilTagType 
 */
enum AprilTagType {
    /** 
     * \brief tag16h5 
     * tag16h5 
     */
    TAG16H5 = 0,
    /** 
     * \brief tag25h9 
     * tag25h9 
     */
    TAG25H9 = 1,
    /** 
     * \brief tag36h11 
     * tag36h11 
     */
    TAG36H11 = 2,
    /** 
     * \brief tagCircle21h7 
     * tagCircle21h7 
     */
    TAGCIRCLE21H7 = 3,
    /** 
     * \brief tagCircle49h12 
     * tagCircle49h12 
     */
    TAGCIRCLE49H12 = 4,
    /** 
     * \brief tagCustom48h12 
     * tagCustom48h12 
     */
    TAGCUSTOM48H12 = 5,
    /** 
     * \brief tagStandard41h12 
     * tagStandard41h12 
     */
    TAGSTANDARD41H12 = 6,
    /** 
     * \brief tagStandard52h13 
     * tagStandard52h13 
     */
    TAGSTANDARD52H13 = 7,
    /** 
     * \brief Last virtual option to run cycles to
     */
    APRILTAGTYPE_LAST
};


static inline const char *getName(const AprilTagType &value)
{
    switch (value) 
    {
     case TAG16H5 : return "TAG16H5"; break ;
     case TAG25H9 : return "TAG25H9"; break ;
     case TAG36H11 : return "TAG36H11"; break ;
     case TAGCIRCLE21H7 : return "TAGCIRCLE21H7"; break ;
     case TAGCIRCLE49H12 : return "TAGCIRCLE49H12"; break ;
     case TAGCUSTOM48H12 : return "TAGCUSTOM48H12"; break ;
     case TAGSTANDARD41H12 : return "TAGSTANDARD41H12"; break ;
     case TAGSTANDARD52H13 : return "TAGSTANDARD52H13"; break ;
     default : return "Not in range"; break ;
     
    }
    return "Not in range";
}

} //namespace AprilTagType

#endif  //APRILTAGTYPE_H_
