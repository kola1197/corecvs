#ifndef OPENCV_PCA_FLOW_PARAMETERS_H_
#define OPENCV_PCA_FLOW_PARAMETERS_H_
/**
 * \file openCVPCAFlowParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from opencv.xml
 */

#include "core/reflection/reflection.h"
#include "core/reflection/defaultSetter.h"
#include "core/reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief OpenCV PCA Flow Parameters 
 * OpenCV PCA Flow Parameters 
 **/
class OpenCVPCAFlowParameters : public corecvs::BaseReflection<OpenCVPCAFlowParameters>
{
public:
    enum FieldId {
        SPARSE_RATE_ID,
        RETAINED_CORNERS_FRACTION_ID,
        OCCLUSIONS_THRESHOLD_ID,
        DAMPING_FACTOR_ID,
        CLAHE_CLIP_ID,
        BASIS_HEIGHT_ID,
        BASIS_WIDTH_ID,
        OPENCV_PCA_FLOW_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief Sparse Rate 
     * Controls density of sparse matches.  
     */
    double mSparseRate;

    /** 
     * \brief Retained corners fraction 
     * Retained corners fraction.  
     */
    double mRetainedCornersFraction;

    /** 
     * \brief Occlusions threshold 
     * Occlusion threshold.  
     */
    double mOcclusionsThreshold;

    /** 
     * \brief Damping factor 
     * Regularization term for solving least-squares. It is not related to the prior regularization. 
     */
    double mDampingFactor;

    /** 
     * \brief Clahe clip 
     * Clip parameter for CLAHE.  
     */
    int mClaheClip;

    /** 
     * \brief Basis height 
     * Number of basis vectors. 
     */
    int mBasisHeight;

    /** 
     * \brief Basis width 
     * Number of basis vectors. 
     */
    int mBasisWidth;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double sparseRate() const
    {
        return mSparseRate;
    }

    double retainedCornersFraction() const
    {
        return mRetainedCornersFraction;
    }

    double occlusionsThreshold() const
    {
        return mOcclusionsThreshold;
    }

    double dampingFactor() const
    {
        return mDampingFactor;
    }

    int claheClip() const
    {
        return mClaheClip;
    }

    int basisHeight() const
    {
        return mBasisHeight;
    }

    int basisWidth() const
    {
        return mBasisWidth;
    }

    /** Section with setters */
    void setSparseRate(double sparseRate)
    {
        mSparseRate = sparseRate;
    }

    void setRetainedCornersFraction(double retainedCornersFraction)
    {
        mRetainedCornersFraction = retainedCornersFraction;
    }

    void setOcclusionsThreshold(double occlusionsThreshold)
    {
        mOcclusionsThreshold = occlusionsThreshold;
    }

    void setDampingFactor(double dampingFactor)
    {
        mDampingFactor = dampingFactor;
    }

    void setClaheClip(int claheClip)
    {
        mClaheClip = claheClip;
    }

    void setBasisHeight(int basisHeight)
    {
        mBasisHeight = basisHeight;
    }

    void setBasisWidth(int basisWidth)
    {
        mBasisWidth = basisWidth;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mSparseRate,                static_cast<const corecvs::DoubleField *>(fields()[SPARSE_RATE_ID]));
        visitor.visit(mRetainedCornersFraction,   static_cast<const corecvs::DoubleField *>(fields()[RETAINED_CORNERS_FRACTION_ID]));
        visitor.visit(mOcclusionsThreshold,       static_cast<const corecvs::DoubleField *>(fields()[OCCLUSIONS_THRESHOLD_ID]));
        visitor.visit(mDampingFactor,             static_cast<const corecvs::DoubleField *>(fields()[DAMPING_FACTOR_ID]));
        visitor.visit(mClaheClip,                 static_cast<const corecvs::IntField *>(fields()[CLAHE_CLIP_ID]));
        visitor.visit(mBasisHeight,               static_cast<const corecvs::IntField *>(fields()[BASIS_HEIGHT_ID]));
        visitor.visit(mBasisWidth,                static_cast<const corecvs::IntField *>(fields()[BASIS_WIDTH_ID]));
    }

    OpenCVPCAFlowParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    OpenCVPCAFlowParameters(
          double sparseRate
        , double retainedCornersFraction
        , double occlusionsThreshold
        , double dampingFactor
        , int claheClip
        , int basisHeight
        , int basisWidth
    )
    {
        mSparseRate = sparseRate;
        mRetainedCornersFraction = retainedCornersFraction;
        mOcclusionsThreshold = occlusionsThreshold;
        mDampingFactor = dampingFactor;
        mClaheClip = claheClip;
        mBasisHeight = basisHeight;
        mBasisWidth = basisWidth;
    }

    /** Exact match comparator **/ 
    bool operator ==(const OpenCVPCAFlowParameters &other) const 
    {
        if ( !(this->mSparseRate == other.mSparseRate)) return false;
        if ( !(this->mRetainedCornersFraction == other.mRetainedCornersFraction)) return false;
        if ( !(this->mOcclusionsThreshold == other.mOcclusionsThreshold)) return false;
        if ( !(this->mDampingFactor == other.mDampingFactor)) return false;
        if ( !(this->mClaheClip == other.mClaheClip)) return false;
        if ( !(this->mBasisHeight == other.mBasisHeight)) return false;
        if ( !(this->mBasisWidth == other.mBasisWidth)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, OpenCVPCAFlowParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //OPENCV_PCA_FLOW_PARAMETERS_H_
