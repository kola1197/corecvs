/**
 * \file disFlowParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from opencv.xml
 */

#include <vector>
#include <stddef.h>
#include "disFlowParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
#if 0
template<>
Reflection BaseReflection<DisFlowParameters>::reflection = Reflection();
template<>
int BaseReflection<DisFlowParameters>::dummy = DisFlowParameters::staticInit();
#endif
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int DisFlowParameters::staticInit(corecvs::Reflection *toFill)
{
    if (toFill == NULL || toFill->objectSize != 0) {
        SYNC_PRINT(("staticInit(): Contract Violation in <DisFlowParameters>\n"));
         return -1;
    }

    toFill->name = ReflectionNaming(
        "dis Flow Parameters",
        "dis Flow Parameters",
        ""
    );

     toFill->objectSize = sizeof(DisFlowParameters);
     

    IntField* field0 = new IntField
        (
          DisFlowParameters::SC_F_ID,
          offsetof(DisFlowParameters, mSc_f),
          5,
          "sc_f",
          "sc_f",
          "first (coarsest) scale",
          true,
         2,
         10000,
         1
        );
    toFill->fields.push_back(field0);
    /*  */ 
    IntField* field1 = new IntField
        (
          DisFlowParameters::SC_L_ID,
          offsetof(DisFlowParameters, mSc_l),
          3,
          "sc_l",
          "sc_l",
          "last (finest) scale",
          true,
         2,
         10000,
         1
        );
    toFill->fields.push_back(field1);
    /*  */ 
    IntField* field2 = new IntField
        (
          DisFlowParameters::MAXITER_ID,
          offsetof(DisFlowParameters, mMaxiter),
          12,
          "maxiter",
          "maxiter",
          "max. iterations on one scale",
          true,
         2,
         10000,
         1
        );
    toFill->fields.push_back(field2);
    /*  */ 
    IntField* field3 = new IntField
        (
          DisFlowParameters::MINITER_ID,
          offsetof(DisFlowParameters, mMiniter),
          12,
          "miniter",
          "miniter",
          "min. iterations on one scale",
          true,
         2,
         10000,
         1
        );
    toFill->fields.push_back(field3);
    /*  */ 
    DoubleField* field4 = new DoubleField
        (
          DisFlowParameters::MINDPRATE_ID,
          offsetof(DisFlowParameters, mMindprate),
          0.05,
          "mindprate",
          "mindprate",
          "minimum rate of change of delta_p before descending one level, e.g. .1 :  change scales when norm(delta_p_last)/norm(delta_p_init) < .1",
          true,
         0,
         1,
         0.01
        );
    field4->widgetHint=BaseField::SPIN_BOX;
    field4->precision=2;
    toFill->fields.push_back(field4);
    /*  */ 
    DoubleField* field5 = new DoubleField
        (
          DisFlowParameters::MINDRRATE_ID,
          offsetof(DisFlowParameters, mMindrrate),
          0.95,
          "mindrrate",
          "mindrrate",
          "minimum rate of change of residual within 3-iterations-window before descending one level, e.g. .8 :  res_new/res_old >  * .8, SET HIGH (1e10) TO DISABLE",
          true,
         0,
         1,
         0.01
        );
    field5->widgetHint=BaseField::SPIN_BOX;
    field5->precision=2;
    toFill->fields.push_back(field5);
    /*  */ 
    DoubleField* field6 = new DoubleField
        (
          DisFlowParameters::MINIMGERR_ID,
          offsetof(DisFlowParameters, mMinimgerr),
          0,
          "minimgerr",
          "minimgerr",
          "if (mean absolute) residual falls below this threshold, terminate iterations on current scale, IGNORES MIN_ITER , SET TO LOW (1e-10) TO DISABLE",
          true,
         0,
         1,
         0.01
        );
    field6->widgetHint=BaseField::SPIN_BOX;
    field6->precision=2;
    toFill->fields.push_back(field6);
    /*  */ 
    IntField* field7 = new IntField
        (
          DisFlowParameters::PATCHSZ_ID,
          offsetof(DisFlowParameters, mPatchsz),
          8,
          "patchsz",
          "patchsz",
          "patch size (edge length in pixels)",
          true,
         2,
         10000,
         1
        );
    toFill->fields.push_back(field7);
    /*  */ 
    DoubleField* field8 = new DoubleField
        (
          DisFlowParameters::POVERL_ID,
          offsetof(DisFlowParameters, mPoverl),
          0.4,
          "poverl",
          "poverl",
          "Patch overlap",
          true,
         2,
         10000,
         1
        );
    field8->widgetHint=BaseField::SPIN_BOX;
    field8->precision=2;
    toFill->fields.push_back(field8);
    /*  */ 
    IntField* field9 = new IntField
        (
          DisFlowParameters::USEFBCON_ID,
          offsetof(DisFlowParameters, mUsefbcon),
          0,
          "usefbcon",
          "usefbcon",
          "use forward-backward flow merging",
          true,
         0,
         10,
         1
        );
    toFill->fields.push_back(field9);
    /*  */ 
    IntField* field10 = new IntField
        (
          DisFlowParameters::PATNORM_ID,
          offsetof(DisFlowParameters, mPatnorm),
          1,
          "patnorm",
          "patnorm",
          "Use patch mean-normalization",
          true,
         0,
         10,
         1
        );
    toFill->fields.push_back(field10);
    /*  */ 
    IntField* field11 = new IntField
        (
          DisFlowParameters::COSTFCT_ID,
          offsetof(DisFlowParameters, mCostfct),
          0,
          "costfct",
          "costfct",
          "Cost function: 0: L2-Norm, 1: L1-Norm, 2: PseudoHuber-Norm",
          true,
         0,
         2,
         1
        );
    toFill->fields.push_back(field11);
    /*  */ 
    IntField* field12 = new IntField
        (
          DisFlowParameters::USETVREF_ID,
          offsetof(DisFlowParameters, mUsetvref),
          1,
          "usetvref",
          "usetvref",
          "TV parameters",
          true,
         2,
         10000,
         1
        );
    toFill->fields.push_back(field12);
    /*  */ 
    DoubleField* field13 = new DoubleField
        (
          DisFlowParameters::TV_ALPHA_ID,
          offsetof(DisFlowParameters, mTv_alpha),
          10,
          "tv_alpha",
          "tv_alpha",
          "tv_alpha",
          true,
         0,
         1000,
         0.5
        );
    field13->widgetHint=BaseField::SPIN_BOX;
    field13->precision=2;
    toFill->fields.push_back(field13);
    /*  */ 
    DoubleField* field14 = new DoubleField
        (
          DisFlowParameters::TV_GAMMA_ID,
          offsetof(DisFlowParameters, mTv_gamma),
          10,
          "tv_gamma",
          "tv_gamma",
          "tv_gamma",
          true,
         0,
         1000,
         0.5
        );
    field14->widgetHint=BaseField::SPIN_BOX;
    field14->precision=2;
    toFill->fields.push_back(field14);
    /*  */ 
    DoubleField* field15 = new DoubleField
        (
          DisFlowParameters::TV_DELTA_ID,
          offsetof(DisFlowParameters, mTv_delta),
          5,
          "tv_delta",
          "tv_delta",
          "tv_delta",
          true,
         0,
         1000,
         0.5
        );
    field15->widgetHint=BaseField::SPIN_BOX;
    field15->precision=2;
    toFill->fields.push_back(field15);
    /*  */ 
    IntField* field16 = new IntField
        (
          DisFlowParameters::TV_INNERIT_ID,
          offsetof(DisFlowParameters, mTv_innerit),
          1,
          "tv_innerit",
          "tv_innerit",
          "tv_innerit",
          true,
         0,
         100,
         0
        );
    toFill->fields.push_back(field16);
    /*  */ 
    IntField* field17 = new IntField
        (
          DisFlowParameters::TV_SOLVERIT_ID,
          offsetof(DisFlowParameters, mTv_solverit),
          3,
          "tv_solverit",
          "tv_solverit",
          "tv_solverit",
          true,
         0,
         100,
         0
        );
    toFill->fields.push_back(field17);
    /*  */ 
    DoubleField* field18 = new DoubleField
        (
          DisFlowParameters::TV_SOR_ID,
          offsetof(DisFlowParameters, mTv_sor),
          1.6,
          "tv_sor",
          "tv_sor",
          "Successive-over-relaxation weight",
          true,
         0,
         100,
         0.1
        );
    field18->widgetHint=BaseField::SPIN_BOX;
    field18->precision=2;
    toFill->fields.push_back(field18);
    /*  */ 
    IntField* field19 = new IntField
        (
          DisFlowParameters::VERBOSITY_ID,
          offsetof(DisFlowParameters, mVerbosity),
          2,
          "verbosity",
          "verbosity",
          "Verbosity, 0: plot nothing, 1: final internal timing 2: complete iteration timing, (UNCOMMENTED -> 3: Display flow scales, 4: Display flow scale iterations)",
          true,
         0,
         4,
         1
        );
    toFill->fields.push_back(field19);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("dis Flow Parameters")]= toFill;
   return 0;
}
int DisFlowParameters::relinkCompositeFields()
{
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


