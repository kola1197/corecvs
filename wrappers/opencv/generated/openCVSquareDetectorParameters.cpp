/**
 * \file openCVSquareDetectorParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from opencv.xml
 */

#include <vector>
#include <stddef.h>
#include "openCVSquareDetectorParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
#if 0
template<>
Reflection BaseReflection<OpenCVSquareDetectorParameters>::reflection = Reflection();
template<>
int BaseReflection<OpenCVSquareDetectorParameters>::dummy = OpenCVSquareDetectorParameters::staticInit();
#endif
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int OpenCVSquareDetectorParameters::staticInit(corecvs::Reflection *toFill)
{
    if (toFill == NULL || toFill->objectSize != 0) {
        SYNC_PRINT(("staticInit(): Contract Violation in <OpenCVSquareDetectorParameters>\n"));
         return -1;
    }

    toFill->name = ReflectionNaming(
        "OpenCV Square Detector Parameters",
        "OpenCV Square Detector Parameters",
        ""
    );

     toFill->objectSize = sizeof(OpenCVSquareDetectorParameters);
     

    BoolField* field0 = new BoolField
        (
          OpenCVSquareDetectorParameters::DEBUG_ID,
          offsetof(OpenCVSquareDetectorParameters, mDebug),
          false,
          "debug",
          "debug",
          "debug"
        );
    field0->widgetHint=BaseField::CHECK_BOX;
    toFill->fields.push_back(field0);
    /*  */ 
    IntField* field1 = new IntField
        (
          OpenCVSquareDetectorParameters::TRESHHOLDLEVEL_ID,
          offsetof(OpenCVSquareDetectorParameters, mTreshholdLevel),
          4,
          "treshholdLevel",
          "treshholdLevel",
          "treshholdLevel"
        );
    toFill->fields.push_back(field1);
    /*  */ 
    IntField* field2 = new IntField
        (
          OpenCVSquareDetectorParameters::CANNYTHRESHOLD1_ID,
          offsetof(OpenCVSquareDetectorParameters, mCannyThreshold1),
          5,
          "cannyThreshold1",
          "cannyThreshold1",
          "cannyThreshold1"
        );
    toFill->fields.push_back(field2);
    /*  */ 
    IntField* field3 = new IntField
        (
          OpenCVSquareDetectorParameters::CANNYTHRESHOLD2_ID,
          offsetof(OpenCVSquareDetectorParameters, mCannyThreshold2),
          50,
          "cannyThreshold2",
          "cannyThreshold2",
          "cannyThreshold2"
        );
    toFill->fields.push_back(field3);
    /*  */ 
    IntField* field4 = new IntField
        (
          OpenCVSquareDetectorParameters::CANNYAPPERTURE_ID,
          offsetof(OpenCVSquareDetectorParameters, mCannyApperture),
          5,
          "cannyApperture",
          "cannyApperture",
          "cannyApperture"
        );
    toFill->fields.push_back(field4);
    /*  */ 
    DoubleField* field5 = new DoubleField
        (
          OpenCVSquareDetectorParameters::MAXCOSINETHRESHOLD_ID,
          offsetof(OpenCVSquareDetectorParameters, mMaxCosineThreshold),
          0.3,
          "maxCosineThreshold",
          "maxCosineThreshold",
          "maxCosineThreshold"
        );
    field5->widgetHint=BaseField::SPIN_BOX;
    field5->precision=2;
    toFill->fields.push_back(field5);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("OpenCV Square Detector Parameters")]= toFill;
   return 0;
}
int OpenCVSquareDetectorParameters::relinkCompositeFields()
{
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


