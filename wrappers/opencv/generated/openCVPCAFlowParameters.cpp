/**
 * \file openCVPCAFlowParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from opencv.xml
 */

#include <vector>
#include <stddef.h>
#include "openCVPCAFlowParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
#if 0
template<>
Reflection BaseReflection<OpenCVPCAFlowParameters>::reflection = Reflection();
template<>
int BaseReflection<OpenCVPCAFlowParameters>::dummy = OpenCVPCAFlowParameters::staticInit();
#endif
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int OpenCVPCAFlowParameters::staticInit(corecvs::Reflection *toFill)
{
    if (toFill == NULL || toFill->objectSize != 0) {
        SYNC_PRINT(("staticInit(): Contract Violation in <OpenCVPCAFlowParameters>\n"));
         return -1;
    }

    toFill->name = ReflectionNaming(
        "OpenCV PCA Flow Parameters",
        "OpenCV PCA Flow Parameters",
        ""
    );

     toFill->objectSize = sizeof(OpenCVPCAFlowParameters);
     

    DoubleField* field0 = new DoubleField
        (
          OpenCVPCAFlowParameters::SPARSE_RATE_ID,
          offsetof(OpenCVPCAFlowParameters, mSparseRate),
          0.024,
          "Sparse Rate",
          "Sparse Rate",
          "Controls density of sparse matches. ",
          true,
         0,
         0.1,
         0.001
        );
    field0->widgetHint=BaseField::SPIN_BOX;
    field0->precision=2;
    toFill->fields.push_back(field0);
    /*  */ 
    DoubleField* field1 = new DoubleField
        (
          OpenCVPCAFlowParameters::RETAINED_CORNERS_FRACTION_ID,
          offsetof(OpenCVPCAFlowParameters, mRetainedCornersFraction),
          0.2,
          "Retained corners fraction",
          "Retained corners fraction",
          "Retained corners fraction. ",
          true,
         0,
         1,
         0.001
        );
    field1->widgetHint=BaseField::SPIN_BOX;
    field1->precision=2;
    toFill->fields.push_back(field1);
    /*  */ 
    DoubleField* field2 = new DoubleField
        (
          OpenCVPCAFlowParameters::OCCLUSIONS_THRESHOLD_ID,
          offsetof(OpenCVPCAFlowParameters, mOcclusionsThreshold),
          0.0003,
          "Occlusions threshold",
          "Occlusions threshold",
          "Occlusion threshold. ",
          true,
         0,
         100,
         0.0001
        );
    field2->widgetHint=BaseField::SPIN_BOX;
    field2->precision=2;
    toFill->fields.push_back(field2);
    /*  */ 
    DoubleField* field3 = new DoubleField
        (
          OpenCVPCAFlowParameters::DAMPING_FACTOR_ID,
          offsetof(OpenCVPCAFlowParameters, mDampingFactor),
          2e-5,
          "Damping factor",
          "Damping factor",
          "Regularization term for solving least-squares. It is not related to the prior regularization.",
          true,
         0,
         100,
         1e-5
        );
    field3->widgetHint=BaseField::SPIN_BOX;
    field3->precision=2;
    toFill->fields.push_back(field3);
    /*  */ 
    IntField* field4 = new IntField
        (
          OpenCVPCAFlowParameters::CLAHE_CLIP_ID,
          offsetof(OpenCVPCAFlowParameters, mClaheClip),
          14,
          "Clahe clip",
          "Clahe clip",
          "Clip parameter for CLAHE. ",
          true,
         -100,
         100,
         0
        );
    toFill->fields.push_back(field4);
    /*  */ 
    IntField* field5 = new IntField
        (
          OpenCVPCAFlowParameters::BASIS_HEIGHT_ID,
          offsetof(OpenCVPCAFlowParameters, mBasisHeight),
          18,
          "Basis height",
          "Basis height",
          "Number of basis vectors.",
          true,
         0,
         1000,
         1
        );
    toFill->fields.push_back(field5);
    /*  */ 
    IntField* field6 = new IntField
        (
          OpenCVPCAFlowParameters::BASIS_WIDTH_ID,
          offsetof(OpenCVPCAFlowParameters, mBasisWidth),
          14,
          "Basis width",
          "Basis width",
          "Number of basis vectors.",
          true,
         0,
         1000,
         1
        );
    toFill->fields.push_back(field6);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("OpenCV PCA Flow Parameters")]= toFill;
   return 0;
}
int OpenCVPCAFlowParameters::relinkCompositeFields()
{
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


