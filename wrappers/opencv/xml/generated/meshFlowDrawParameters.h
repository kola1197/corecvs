#ifndef MESH_FLOW_DRAW_PARAMETERS_H_
#define MESH_FLOW_DRAW_PARAMETERS_H_
/**
 * \file meshFlowDrawParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from opencv_wrapper.xml
 */

#include "core/reflection/reflection.h"
#include "core/reflection/defaultSetter.h"
#include "core/reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Mesh Flow Draw Parameters 
 * Mesh Flow Draw Parameters 
 **/
class MeshFlowDrawParameters : public corecvs::BaseReflection<MeshFlowDrawParameters>
{
public:
    enum FieldId {
        GRID_ROWS_ID,
        GRID_COLUMNS_ID,
        RANSAC_GRID_ROWS_ID,
        RANSAC_GRID_COLUMNS_ID,
        MEDIAN_FILTER_SIZE_H_ID,
        MEDIAN_FILTER_SIZE_W_ID,
        MAX_FEATURE_NUMBER_ID,
        FEATURE_TRESHOLD_ID,
        MESH_FLOW_DRAW_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief Grid Rows 
     * Grid Rows 
     */
    int mGridRows;

    /** 
     * \brief Grid Columns 
     * Grid Columns 
     */
    int mGridColumns;

    /** 
     * \brief Ransac Grid Rows 
     * Ransac Grid Rows 
     */
    int mRansacGridRows;

    /** 
     * \brief Ransac Grid Columns 
     * Ransac Grid Columns 
     */
    int mRansacGridColumns;

    /** 
     * \brief Median Filter Size H 
     * Median Filter Size H 
     */
    int mMedianFilterSizeH;

    /** 
     * \brief Median Filter Size W 
     * Median Filter Size W 
     */
    int mMedianFilterSizeW;

    /** 
     * \brief Max Feature Number 
     * Max Feature Number 
     */
    int mMaxFeatureNumber;

    /** 
     * \brief Feature Treshold 
     * Feature Treshold 
     */
    double mFeatureTreshold;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    int gridRows() const
    {
        return mGridRows;
    }

    int gridColumns() const
    {
        return mGridColumns;
    }

    int ransacGridRows() const
    {
        return mRansacGridRows;
    }

    int ransacGridColumns() const
    {
        return mRansacGridColumns;
    }

    int medianFilterSizeH() const
    {
        return mMedianFilterSizeH;
    }

    int medianFilterSizeW() const
    {
        return mMedianFilterSizeW;
    }

    int maxFeatureNumber() const
    {
        return mMaxFeatureNumber;
    }

    double featureTreshold() const
    {
        return mFeatureTreshold;
    }

    /* Section with setters */
    void setGridRows(int gridRows)
    {
        mGridRows = gridRows;
    }

    void setGridColumns(int gridColumns)
    {
        mGridColumns = gridColumns;
    }

    void setRansacGridRows(int ransacGridRows)
    {
        mRansacGridRows = ransacGridRows;
    }

    void setRansacGridColumns(int ransacGridColumns)
    {
        mRansacGridColumns = ransacGridColumns;
    }

    void setMedianFilterSizeH(int medianFilterSizeH)
    {
        mMedianFilterSizeH = medianFilterSizeH;
    }

    void setMedianFilterSizeW(int medianFilterSizeW)
    {
        mMedianFilterSizeW = medianFilterSizeW;
    }

    void setMaxFeatureNumber(int maxFeatureNumber)
    {
        mMaxFeatureNumber = maxFeatureNumber;
    }

    void setFeatureTreshold(double featureTreshold)
    {
        mFeatureTreshold = featureTreshold;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mGridRows,                  static_cast<const corecvs::IntField *>(fields()[GRID_ROWS_ID]));
        visitor.visit(mGridColumns,               static_cast<const corecvs::IntField *>(fields()[GRID_COLUMNS_ID]));
        visitor.visit(mRansacGridRows,            static_cast<const corecvs::IntField *>(fields()[RANSAC_GRID_ROWS_ID]));
        visitor.visit(mRansacGridColumns,         static_cast<const corecvs::IntField *>(fields()[RANSAC_GRID_COLUMNS_ID]));
        visitor.visit(mMedianFilterSizeH,         static_cast<const corecvs::IntField *>(fields()[MEDIAN_FILTER_SIZE_H_ID]));
        visitor.visit(mMedianFilterSizeW,         static_cast<const corecvs::IntField *>(fields()[MEDIAN_FILTER_SIZE_W_ID]));
        visitor.visit(mMaxFeatureNumber,          static_cast<const corecvs::IntField *>(fields()[MAX_FEATURE_NUMBER_ID]));
        visitor.visit(mFeatureTreshold,           static_cast<const corecvs::DoubleField *>(fields()[FEATURE_TRESHOLD_ID]));
    }

    MeshFlowDrawParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    MeshFlowDrawParameters(
          int gridRows
        , int gridColumns
        , int ransacGridRows
        , int ransacGridColumns
        , int medianFilterSizeH
        , int medianFilterSizeW
        , int maxFeatureNumber
        , double featureTreshold
    )
    {
        mGridRows = gridRows;
        mGridColumns = gridColumns;
        mRansacGridRows = ransacGridRows;
        mRansacGridColumns = ransacGridColumns;
        mMedianFilterSizeH = medianFilterSizeH;
        mMedianFilterSizeW = medianFilterSizeW;
        mMaxFeatureNumber = maxFeatureNumber;
        mFeatureTreshold = featureTreshold;
    }

    bool operator ==(const MeshFlowDrawParameters &other) const 
    {
        if ( !(this->mGridRows == other.mGridRows)) return false;
        if ( !(this->mGridColumns == other.mGridColumns)) return false;
        if ( !(this->mRansacGridRows == other.mRansacGridRows)) return false;
        if ( !(this->mRansacGridColumns == other.mRansacGridColumns)) return false;
        if ( !(this->mMedianFilterSizeH == other.mMedianFilterSizeH)) return false;
        if ( !(this->mMedianFilterSizeW == other.mMedianFilterSizeW)) return false;
        if ( !(this->mMaxFeatureNumber == other.mMaxFeatureNumber)) return false;
        if ( !(this->mFeatureTreshold == other.mFeatureTreshold)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, MeshFlowDrawParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //MESH_FLOW_DRAW_PARAMETERS_H_
