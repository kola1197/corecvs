#ifndef PATTERN_FROM_POSE_PARAMETERS_H_
#define PATTERN_FROM_POSE_PARAMETERS_H_
/**
 * \file patternFromPoseParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from utils.xml
 */

#include "core/reflection/reflection.h"
#include "core/reflection/defaultSetter.h"
#include "core/reflection/printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

// using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

// namespace corecvs {
// }
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Pattern From Pose Parameters 
 * Pattern From Pose Parameters 
 **/
class PatternFromPoseParameters : public corecvs::BaseReflection<PatternFromPoseParameters>
{
public:
    enum FieldId {
        UNDISTORT_ID,
        PATTERN_SCALE_ID,
        DRAW_HOMOGRAPHY_ID,
        DRAW_CUBE_ID,
        DRAW_POSE_MESH_ID,
        PATTERN_FROM_POSE_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief undistort 
     * undistort 
     */
    bool mUndistort;

    /** 
     * \brief pattern scale 
     * Scale of pattern unit in real world units 
     */
    double mPatternScale;

    /** 
     * \brief draw homography 
     * draw homography 
     */
    bool mDrawHomography;

    /** 
     * \brief draw cube 
     * draw cube 
     */
    bool mDrawCube;

    /** 
     * \brief draw pose mesh 
     * draw pose mesh 
     */
    bool mDrawPoseMesh;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit(corecvs::Reflection *toFill);

    static int relinkCompositeFields();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    bool undistort() const
    {
        return mUndistort;
    }

    double patternScale() const
    {
        return mPatternScale;
    }

    bool drawHomography() const
    {
        return mDrawHomography;
    }

    bool drawCube() const
    {
        return mDrawCube;
    }

    bool drawPoseMesh() const
    {
        return mDrawPoseMesh;
    }

    /** Section with setters */
    void setUndistort(bool undistort)
    {
        mUndistort = undistort;
    }

    void setPatternScale(double patternScale)
    {
        mPatternScale = patternScale;
    }

    void setDrawHomography(bool drawHomography)
    {
        mDrawHomography = drawHomography;
    }

    void setDrawCube(bool drawCube)
    {
        mDrawCube = drawCube;
    }

    void setDrawPoseMesh(bool drawPoseMesh)
    {
        mDrawPoseMesh = drawPoseMesh;
    }

    /** Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mUndistort,                 static_cast<const corecvs::BoolField *>(fields()[UNDISTORT_ID]));
        visitor.visit(mPatternScale,              static_cast<const corecvs::DoubleField *>(fields()[PATTERN_SCALE_ID]));
        visitor.visit(mDrawHomography,            static_cast<const corecvs::BoolField *>(fields()[DRAW_HOMOGRAPHY_ID]));
        visitor.visit(mDrawCube,                  static_cast<const corecvs::BoolField *>(fields()[DRAW_CUBE_ID]));
        visitor.visit(mDrawPoseMesh,              static_cast<const corecvs::BoolField *>(fields()[DRAW_POSE_MESH_ID]));
    }

    PatternFromPoseParameters()
    {
        corecvs::DefaultSetter setter;
        accept(setter);
    }

    PatternFromPoseParameters(
          bool undistort
        , double patternScale
        , bool drawHomography
        , bool drawCube
        , bool drawPoseMesh
    )
    {
        mUndistort = undistort;
        mPatternScale = patternScale;
        mDrawHomography = drawHomography;
        mDrawCube = drawCube;
        mDrawPoseMesh = drawPoseMesh;
    }

    /** Exact match comparator **/ 
    bool operator ==(const PatternFromPoseParameters &other) const 
    {
        if ( !(this->mUndistort == other.mUndistort)) return false;
        if ( !(this->mPatternScale == other.mPatternScale)) return false;
        if ( !(this->mDrawHomography == other.mDrawHomography)) return false;
        if ( !(this->mDrawCube == other.mDrawCube)) return false;
        if ( !(this->mDrawPoseMesh == other.mDrawPoseMesh)) return false;
        return true;
    }
    friend std::ostream& operator << (std::ostream &out, PatternFromPoseParameters &toSave)
    {
        corecvs::PrinterVisitor printer(out);
        toSave.accept<corecvs::PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        std::cout << *this;
    }
};
#endif  //PATTERN_FROM_POSE_PARAMETERS_H_
