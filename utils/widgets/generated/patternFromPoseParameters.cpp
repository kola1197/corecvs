/**
 * \file patternFromPoseParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from utils.xml
 */

#include <vector>
#include <stddef.h>
#include "patternFromPoseParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
#if 0
template<>
Reflection BaseReflection<PatternFromPoseParameters>::reflection = Reflection();
template<>
int BaseReflection<PatternFromPoseParameters>::dummy = PatternFromPoseParameters::staticInit();
#endif
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int PatternFromPoseParameters::staticInit(corecvs::Reflection *toFill)
{
    if (toFill == NULL || toFill->objectSize != 0) {
        SYNC_PRINT(("staticInit(): Contract Violation in <PatternFromPoseParameters>\n"));
         return -1;
    }

    toFill->name = ReflectionNaming(
        "Pattern From Pose Parameters",
        "Pattern From Pose Parameters",
        ""
    );

     toFill->objectSize = sizeof(PatternFromPoseParameters);
     

    BoolField* field0 = new BoolField
        (
          PatternFromPoseParameters::UNDISTORT_ID,
          offsetof(PatternFromPoseParameters, mUndistort),
          true,
          "undistort",
          "undistort",
          "undistort"
        );
    field0->widgetHint=BaseField::CHECK_BOX;
    toFill->fields.push_back(field0);
    /*  */ 
    DoubleField* field1 = new DoubleField
        (
          PatternFromPoseParameters::PATTERN_SCALE_ID,
          offsetof(PatternFromPoseParameters, mPatternScale),
          16,
          "pattern scale",
          "pattern scale",
          "Scale of pattern unit in real world units"
        );
    field1->widgetHint=BaseField::SPIN_BOX;
    field1->precision=2;
    toFill->fields.push_back(field1);
    /*  */ 
    BoolField* field2 = new BoolField
        (
          PatternFromPoseParameters::DRAW_HOMOGRAPHY_ID,
          offsetof(PatternFromPoseParameters, mDrawHomography),
          false,
          "draw homography",
          "draw homography",
          "draw homography"
        );
    field2->widgetHint=BaseField::CHECK_BOX;
    toFill->fields.push_back(field2);
    /*  */ 
    BoolField* field3 = new BoolField
        (
          PatternFromPoseParameters::DRAW_CUBE_ID,
          offsetof(PatternFromPoseParameters, mDrawCube),
          true,
          "draw cube",
          "draw cube",
          "draw cube"
        );
    field3->widgetHint=BaseField::CHECK_BOX;
    toFill->fields.push_back(field3);
    /*  */ 
    BoolField* field4 = new BoolField
        (
          PatternFromPoseParameters::DRAW_POSE_MESH_ID,
          offsetof(PatternFromPoseParameters, mDrawPoseMesh),
          true,
          "draw pose mesh",
          "draw pose mesh",
          "draw pose mesh"
        );
    field4->widgetHint=BaseField::CHECK_BOX;
    toFill->fields.push_back(field4);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Pattern From Pose Parameters")]= toFill;
   return 0;
}
int PatternFromPoseParameters::relinkCompositeFields()
{
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


